#!/usr/bin/env python3
# -*- coding: utf-8 -*-


import sys


# if not calling for snakemake rule
try:
    sys.stderr = open(snakemake.log[0], "w")
except NameError:
    pass


import json
import jsonschema
import numpy as np
import pandas as pd


VALIDATOR_VERSION = jsonschema.Draft202012Validator


def validate_record(record, validator):
    """
    Validate a single JSON record against a valid schema

    Each entry of the record is checked against the schema. If errors are
    encountered, all o them are formattred in a user-friendly way.
    The output is a tuple whose first element is the check result and the
    second element is the list of formatted error messages.

    Parameters
    ----------
    record : dict
        A dictionnary of key-values generated by json.load.
    validator: dict
        A valid instance of jsonschema.protocols.Validator.

    Returns
    -------
    tuple:
        a tuple (STATUS, Errors) where status is either of PASS or FAIL and
        Errors us a list of all validation errors encountered.
    """
    # Get all validations errors and format
    errors = list(validator.iter_errors(record))
    messages = []
    if len(errors) == 0:
        status = "PASS"
    else:
        status = "FAIL"
        for error in errors:
            messages.append(
                f"Invalid value in field {error.schema_path[-2]}. "
                f"Expected {error.schema_path[-1]}: {error.validator_value}, "
                f"got {error.instance}"
            )
    return status, messages


def main(schema, metrics, json_path, tsv_path):
    # load schema as a json object and validate
    with open(schema, 'r') as f:
        json_schema = json.load(f)
    VALIDATOR_VERSION.check_schema(json_schema)
    validator = VALIDATOR_VERSION(
        json_schema
    )

    # load metrics
    with open(metrics, 'r') as fp:
        records = json.load(fp)

    # Validate each record and register validation errors
    # valid_records = {}
    validation_status = {}
    for record in records:
        status, errors = validate_record(record, validator)
        validation_status.update(
            {
                record['isolate_id']: {
                    "STATUS": status,
                    "MESSAGES": errors
                }
            }
        )
        # save valid records
        # if status == 'PASS':
            # valid_records[record['isolate_id']] = record

    # export valid metadata to Json file
    # with open(metadata_json, 'w') as f:
        # json.dump(valid_records, f, indent=4)

    # Export JSON
    with open(json_path, 'w') as f:
        json.dump(validation_status, f, indent=4)

    # Create DF and export to tsv
    dict_to_df = {
        k: [v['STATUS'], ';'.join(v['MESSAGES'])]
        for k, v in validation_status.items()
    }
    pd.DataFrame.from_dict(
        dict_to_df,
        orient='index',
        columns=['STATUS', 'MESSAGES']
    ).reset_index(
        names='isolate_id'
    ).to_csv(
        tsv_path,
        sep='\t',
        header=True,
        index=False
    )


if __name__ == '__main__':
    main(
        snakemake.params['schema'],
        snakemake.input['metrics'],
        snakemake.output['json'],
        snakemake.output['tsv']
    )
